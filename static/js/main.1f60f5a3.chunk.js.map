{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["CONSTANTS","STRINGS","location","apiKey","a","fetch","then","res","ok","json","catch","err","window","alert","response","Title","text","className","Subtitle","LocationInfo","GithubLink","href","alt","src","App","useState","value","reason","decision","setDecision","currentLocation","setCurrentLocation","localStorage","getItem","currentApiKey","setCurrentApiKey","useEffect","prompt","setItem","loadForecast","forecast","currentHour","Date","getHours","data","forecastday","hour","slice","averageTemperature","reduce","prev","acc","temp_c","length","averageWindSpeed","wind_kph","averageCloudCoverage","cloud","willItRain","filter","point","will_it_rain","averageRainAmount","precip_mm","console","log","decide","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f60f5a3.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport { Decision, Forecast, HourlyDatapoint, LocationInfoProps, SubtitleProps, TitleProps } from './App.interfaces';\nimport './App.css';\n\n// tweakable thresholds\nconst CONSTANTS: Record<string, number> = {\n  minimumTemperature: 15,\n  maximumTemperature: 25,\n  maximumWindSpeed: 20,\n  maximumCloudCoverage: 70,\n  hoursIntoFuture: 2,\n};\n\nconst STRINGS: Record<string, string> = {\n  apiKeyMessage: 'Enter your weatherAPI key:',\n  locationMessage: 'Enter your location:',\n  title: 'Is it a good idea to go cycling today?',\n  dataMessage: 'There is no data yet.',\n  coldMessage: 'Temperature is too cold.',\n  hotMessage: 'Temperature is too hot.',\n  windMessage: 'There is too much wind.',\n  rainMessage: 'It will probably rain.',\n  githubLink: 'https://john-rodewald.github.io/',\n  yes: 'Yes!',\n  no: 'No.',\n};\n\n// API fetch\nasync function loadForecast(location: string, apiKey: string): Promise<Forecast> {\n  const response = await fetch(`https://api.weatherapi.com/v1/forecast.json?key=${apiKey}&q=${location}&days=1&aqi=no&alerts=no`)\n    .then(res => res.ok && res.json())\n    .catch(err => window.alert(err));\n\n  return response;\n}\n\n// Data processing\nfunction decide(forecast: Forecast | undefined): Decision {\n  if (!forecast) return { value: false, reason: STRINGS.dataMessage };\n\n  const currentHour = new Date().getHours();\n  const data: HourlyDatapoint[] = forecast.forecast.forecastday[0].hour.slice(currentHour, currentHour + CONSTANTS.hoursIntoFuture);\n  const averageTemperature: number = data.reduce((prev, acc) => prev + acc.temp_c, 0) / data.length;\n  const averageWindSpeed: number = data.reduce((prev, acc) => prev + acc.wind_kph, 0) / data.length;\n  const averageCloudCoverage: number = data.reduce((prev, acc) => prev + acc.cloud, 0) / data.length;\n  const willItRain: boolean = data.filter((point) => point.will_it_rain === 1).length > 0;\n  const averageRainAmount: number = data.reduce((prev, acc) => prev + acc.precip_mm, 0) / data.length;\n  console.log('data', data);\n  console.log('averageRainAmount', averageRainAmount);\n  console.log('averageTemperature', averageTemperature);\n  console.log('averageWindSpeed', averageWindSpeed);\n\n  if (averageTemperature < CONSTANTS.minimumTemperature)\n    return { value: false, reason: STRINGS.coldMessage };\n\n  if (averageTemperature > CONSTANTS.maximumTemperature)\n    return { value: false, reason: STRINGS.hotMessage };\n\n  if (averageWindSpeed > CONSTANTS.maximumWindSpeed)\n    return { value: false, reason: STRINGS.windMessage };\n\n  if (averageCloudCoverage > CONSTANTS.maximumCloudCoverage || (willItRain && averageRainAmount > 1))\n    return { value: false, reason: STRINGS.rainMessage };\n\n  return { value: true };\n}\n\n// Components - could be in their separate files\nconst Title = ({ text }: TitleProps) => <h1 className=\"title\">{text}</h1>;\nconst Subtitle = ({ text }: SubtitleProps) => <h2 className=\"subtitle\">{text}</h2>;\nconst LocationInfo = ({ location }: LocationInfoProps) => <p className=\"location\">({location})</p>;\nconst GithubLink = () => <a href={STRINGS.githubLink}><img alt=\"github-icon\" className=\"github-img\" src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRZcKR3b2Q6L7kLv3kV04kBtcs-FaYRsYfxRQ&usqp=CAU\"/></a>;\n\n// Main entry point\nconst App = () => {\n  const [decision, setDecision] = useState<Decision>({ value: false, reason: STRINGS.dataMessage });\n  const [currentLocation, setCurrentLocation] = useState<string>('');\n  const [currentApiKey, setCurrentApiKey] = useState<string>(localStorage.getItem('cycling-api-key') ?? '');\n\n  useEffect(() => {\n    if (!currentApiKey) {\n      const apiKey = window.prompt(STRINGS.apiKeyMessage) ?? '';\n      localStorage.setItem('cycling-api-key', apiKey);\n      setCurrentApiKey(apiKey);\n    }\n    const location = window.prompt(STRINGS.locationMessage) ?? '';\n    setCurrentLocation(location);\n    loadForecast(location, currentApiKey).then((forecast) => {\n      setDecision(decide(forecast));\n    });\n  }, [currentApiKey]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <span className=\"header-container\">\n          <Title text={STRINGS.title} />\n          <Subtitle text={decision.value ? STRINGS.yes : `${STRINGS.no} ${decision.reason ?? ''}`} />\n          {currentLocation && <LocationInfo location={currentLocation} />}\n        </span>\n      </header>\n      <footer>\n        <GithubLink />\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}